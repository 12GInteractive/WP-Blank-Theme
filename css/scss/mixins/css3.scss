// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ APPEARANCE                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin appearance ($value) {
  @include prefixer(appearance, $value, webkit moz ms o spec);
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ BACKFACE VISIBILITY                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin backface-visibility($visibility) {
  @include prefixer(backface-visibility, $visibility, webkit spec);
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ BORDER RADIUS                               
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin border-top-radius($radii) {
  @include prefixer(border-top-left-radius, $radii, spec);
  @include prefixer(border-top-right-radius, $radii, spec);
}
@mixin border-bottom-radius($radii) {
  @include prefixer(border-bottom-left-radius, $radii, spec);
  @include prefixer(border-bottom-right-radius, $radii, spec);
}
@mixin border-left-radius($radii) {
  @include prefixer(border-top-left-radius, $radii, spec);
  @include prefixer(border-bottom-left-radius, $radii, spec);
}
@mixin border-right-radius($radii) {
  @include prefixer(border-top-right-radius, $radii, spec);
  @include prefixer(border-bottom-right-radius, $radii, spec);
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ BOX SIZING                              
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin box-sizing ($box) {
  // content-box | border-box | inherit
  @include prefixer(box-sizing, $box, webkit moz spec);
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ LINEAR GRADIENT                              
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin linear-gradient($pos, $G1, $G2: false,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false,
                       $deprecated-pos1: left top,
                       $deprecated-pos2: left bottom,
                       $fallback: false) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;
  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;
    $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;
    $pos: null;
  }
  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec:   nth($positions, 2);
  }
  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);
  // Set $G1 as the default fallback color
  $fallback-color: nth($G1, 1);
  // If $fallback is a color use that color as the fallback color
  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }
  background-color: $fallback-color;
  background-image: _deprecated-webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $full); // Safari <= 5.0
  background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
  background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ RADIAL GRADIENT                              
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin radial-gradient($G1,        $G2,
                       $G3: false, $G4: false,
                       $G5: false, $G6: false,
                       $G7: false, $G8: false,
                       $G9: false, $G10: false,
                       $pos: null,
                       $shape-size: null,
                       $deprecated-pos1: center center,
                       $deprecated-pos2: center center,
                       $deprecated-radius1: 0,
                       $deprecated-radius2: 460,
                       $fallback: false) {
  $data: _radial-arg-parser($G1, $G2, $pos, $shape-size);
  $G1:  nth($data, 1);
  $G2:  nth($data, 2);
  $pos: nth($data, 3);
  $shape-size: nth($data, 4);
  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);
  // Strip deprecated cover/contain for spec
  $shape-size-spec: _shape-size-stripper($shape-size);
  // Set $G1 as the default fallback color
  $first-color: nth($full, 1);
  $fallback-color: nth($first-color, 1);
  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }
  // Add Commas and spaces
  $shape-size: if($shape-size, '#{$shape-size}, ', null);
  $pos:        if($pos, '#{$pos}, ', null);
  $pos-spec:   if($pos, 'at #{$pos}', null);
  $shape-size-spec: if(($shape-size-spec != ' ') and ($pos == null), '#{$shape-size-spec}, ', '#{$shape-size-spec} ');
  background-color:  $fallback-color;
  background-image: _deprecated-webkit-gradient(radial, $deprecated-pos1, $deprecated-pos2, $full, $deprecated-radius1, $deprecated-radius2); // Safari <= 5.0 && IOS 4
  background-image: -webkit-radial-gradient(unquote(#{$pos}#{$shape-size}#{$full}));
  background-image: unquote("radial-gradient(#{$shape-size-spec}#{$pos-spec}#{$full})");
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ PLACEHOLDER                           
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
$placeholders: '-webkit-input-placeholder',
               '-moz-placeholder',
               '-ms-input-placeholder';
@mixin placeholder {
  @each $placeholder in $placeholders {
    @if $placeholder == "-webkit-input-placeholder" {
      &::#{$placeholder} {
        @content;
      }
    }
    @else if $placeholder == "-moz-placeholder" {
      // FF 18-
      &:#{$placeholder} {
        @content;
      }
      // FF 19+
      &::#{$placeholder} {
        @content;
      }
    }
    @else {
      &:#{$placeholder} {
        @content;
      }
    }
  }
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ TRANSITION                                
// Usage:  @include transition (all, 2.0s, ease-in-out);
//         @include transition ((opacity, width), (1.0s, 2.0s), ease-in, (0, 2s));
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin transition ($properties...) {
  @if length($properties) >= 1 {
    @include prefixer(transition, $properties, webkit moz spec);
  }
  @else {
    $properties: all 0.15s ease-out 0;
    @include prefixer(transition, $properties, webkit moz spec);
  }
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ TRANSFORM                               
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin transform($property: none) {
//  none | <transform-function>
  @include prefixer(transform, $property, webkit moz ms o spec);
}
@mixin transform-origin($axes: 50%) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}
@mixin transform-style ($style: flat) {
  @include prefixer(transform-style, $style, webkit moz ms o spec);
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ USER SELECT                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin user-select($arg: none) {
  @include prefixer(user-select, $arg, webkit moz ms spec);
}