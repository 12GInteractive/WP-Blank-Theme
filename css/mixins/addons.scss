// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ PREFIXER                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

@mixin prefixer ($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    }
    @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    }
    @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    }
    @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    }
    @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    }
    @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false;
  $prefix-for-mozilla:   false;
  $prefix-for-microsoft: false;
  $prefix-for-opera:     false;
  $prefix-for-spec:      false;
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ CLEARFIX                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin clearfix {
  zoom:1;
  &:before, &:after {
    content: "\0020"; 
    display: block; 
    height: 0; 
    overflow: hidden; 
  }
  &:after {
    clear: both;
  }
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ HIDE TEXT                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin hide-text {
  color:            transparent;
  font:             0/0 a;
  text-shadow:      none;
}

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ SIZE                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin size($size) {
  @if length($size) == 1 {
    @if $size == auto {
      width:  $size;
      height: $size;
    }
    @else if unitless($size) {
      width:  $size + px;
      height: $size + px;
    }
    @else if not(unitless($size)) {
      width:  $size;
      height: $size;
    }
  }
  // Width x Height
  @if length($size) == 2 {
    $width:  nth($size, 1);
    $height: nth($size, 2);
    @if $width == auto {
      width: $width;
    }
    @else if not(unitless($width)) {
      width: $width;
    }
    @else if unitless($width) {
      width: $width + px;
    }
    @if $height == auto {
      height: $height;
    }
    @else if not(unitless($height)) {
      height: $height;
    }
    @else if unitless($height) {
      height: $height + px;
    }
  }
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ HTML5 INPUT TYPES                               
// You must use interpolation on the variable:
// #{$all-text-inputs}
// #{$all-text-inputs-hover}
// #{$all-text-inputs-focus}
// Usage:
//   #{$all-text-inputs}, textarea {
//     border: 1px solid red;
//   }
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
$inputs-list: 'input[type="email"]',
              'input[type="number"]',
              'input[type="password"]',
              'input[type="search"]',
              'input[type="tel"]',
              'input[type="text"]',
              'input[type="url"]',
              // Webkit & Gecko may change the display of these in the future
              'input[type="color"]',
              'input[type="date"]',
              'input[type="datetime"]',
              'input[type="datetime-local"]',
              'input[type="month"]',
              'input[type="time"]',
              'input[type="week"]';
$unquoted-inputs-list: ();
@each $input-type in $inputs-list {
  $unquoted-inputs-list: append($unquoted-inputs-list, unquote($input-type), comma);
}
$all-text-inputs: $unquoted-inputs-list;
// Hover Pseudo-class
$all-text-inputs-hover: ();
@each $input-type in $unquoted-inputs-list {
      $input-type-hover: $input-type + ":hover";
      $all-text-inputs-hover: append($all-text-inputs-hover, $input-type-hover, comma);
}
// Focus Pseudo-class
$all-text-inputs-focus: ();
@each $input-type in $unquoted-inputs-list {
      $input-type-focus: $input-type + ":focus";
      $all-text-inputs-focus: append($all-text-inputs-focus, $input-type-focus, comma);
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ POSITION                                
// Usage:
// .myclass {
//    @include position(relative top right bottom left);
// }
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin position ($position: relative, $coordinates: 0 0 0 0) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }
  $top: nth($coordinates, 1);
  $right: nth($coordinates, 2);
  $bottom: nth($coordinates, 3);
  $left: nth($coordinates, 4);
  position: $position;
  @if $top == auto {
    top: $top;
  }
  @else if not(unitless($top)) {
    top: $top;
  }
  @if $right == auto {
    right: $right;
  }
  @else if not(unitless($right)) {
    right: $right;
  }
  @if $bottom == auto {
    bottom: $bottom;
  }
  @else if not(unitless($bottom)) {
    bottom: $bottom;
  }
  @if $left == auto {
    left: $left;
  }
  @else if not(unitless($left)) {
    left: $left;
  }
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ TRIANGLE                                
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;
  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;
    @if $direction == up {
      border-bottom-color: $color;
    } @else if $direction == right {
      border-left-color:   $color;
    } @else if $direction == down {
      border-top-color:    $color;
    } @else if $direction == left {
      border-right-color:  $color;
    }
  }
  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $size solid $color;
    @if $direction == up-right {
      border-left:  $size solid transparent;
    } @else if $direction == up-left {
      border-right: $size solid transparent;
    }
  }
  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $size solid $color;
    @if $direction == down-right {
      border-left:  $size solid transparent;
    } @else if $direction == down-left {
      border-right: $size solid transparent;
    }
  }
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ PIXELS TO EM's                                
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //

@function em($pxval, $base: 16) {
  @return ($pxval / $base) * 1em;
}


// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// ※ Tint to Shade                               
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
// Add percentage of white to a color
@function tint($color, $percent){
  @return mix(white, $color, $percent);
}
// Add percentage of black to a color
@function shade($color, $percent){
  @return mix(black, $color, $percent);
}